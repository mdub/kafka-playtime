#! /usr/bin/env ruby

require "clamp"
require "json"
require "ruby-kafka"

class InvalidCommand < StandardError
end

Clamp do
  option ["-k", "--kafka-broker"], "ADDRESS", "Kafka broker address",
         multivalued: true,
         environment_variable: "KAFKA_BROKER",
         required: true

  parameter "ID", "robot ID"

  subcommand "control", "control a robot" do
    def execute
      $stdin.each do |line|
        begin
          event = parse_command(line.chomp).merge(robot: id)
          kafka.deliver_message(JSON.dump(event), topic: kafka_commands_topic)
        rescue InvalidCommand => e
          puts "WAT?"
        end
      end
    end
  end

  subcommand "watch", "observe state of the world" do
    def execute
      puts "eventually I'll print the board"
    end
  end

  private

  def kafka
    @kafka ||= Kafka.new(seed_brokers: kafka_broker_list)
  end

  def kafka_commands_topic
    "robot-commands"
  end

  def parse_command(input)
    command, *args = input.downcase.split(" ")
    # event = { robot: id, command: command, args: args }
    case command
    when /^(?<command>place) (?<x>\d) (?<y>\d) (?<direction>[news])/
      { type: $~[:command], event: { x: $~[:x].to_i, y: $~[:y].to_i, direction: $~[:direction] } }
    when "move"
      { type: command, event: {} }
    when "left", "right"
      { type: "rotate", event: { direction: command } }
    else
      raise InvalidCommand, input
    end
  end

end
