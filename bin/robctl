#! /usr/bin/env ruby

require "clamp"
require "json"
require "ruby-kafka"
require "securerandom"

require_relative "../lib/bot/state"
require_relative "../lib/bot/world"

class InvalidCommand < StandardError
end

Clamp do
  option ["-k", "--kafka-broker"], "ADDRESS", "Kafka broker address",
         multivalued: true,
         environment_variable: "KAFKA_BROKER",
         required: true


  subcommand "control", "control a robot" do

    parameter "ID", "robot ID"

    def execute
      print '> '
      $stdin.each do |line|
        begin
          event = { robot: id }.merge(parse_command(line.chomp))
          kafka.deliver_message(JSON.dump(event), topic: kafka_commands_topic)
          puts "OK"
        rescue InvalidCommand => e
          puts "WAT?"
        end
        print '> '
      end
    end

  end

  subcommand "watch", "observe updates" do

    option ["-g", "--group"], "GROUP-ID", "consumer group id",
           attribute_name: :consumer_group_id
    
    option ["--[no-]history"], :flag, "start from beginning"
           
    def consumer
      @consumer ||= kafka.consumer(group_id: consumer_group_id)
    end

    def default_consumer_group_id
      SecureRandom.uuid
    end

    subcommand "commands", "watch robot-commands" do
  
      def execute
        consumer.subscribe(kafka_commands_topic, start_from_beginning: history?)
        trap("TERM") do 
          puts "Shutting down"
          consumer.stop
        end
        consumer.each_message do |message|
          begin
            puts message.value
          rescue StandardError => e
            puts e, e.backtrace
            exit 1
          end
        end
      end

    end

    subcommand "world", "observe the general state of the world" do

      # option ["-g", "--group"], "GROUP-ID", "consumer group id",
      #        attribute_name: :consumer_group_id
    
      option ["--[no-]history"], :flag, "start from beginning"

      def execute
        world = Bot::World.new
        consumer = kafka.consumer(group_id: SecureRandom.uuid)
        consumer.subscribe(kafka_commands_topic, start_from_beginning: history?)
        trap("TERM") do 
          puts "Shutting down"
          consumer.stop
        end
        puts "Nearly ready"
        consumer.each_message do |message|
          begin
            event = JSON.load(message.value)
            world.process(event)
            puts "\n" * 3
            puts world.to_s
          rescue StandardError => e
            puts e, e.backtrace
            exit 1
          end
        end
      end

    end

  end

  private

  def kafka
    @kafka ||= Kafka.new(seed_brokers: kafka_broker_list)
  end

  def kafka_commands_topic
    "robot-commands"
  end

  def kafka_states_topic
    "robot-states"
  end

  def parse_command(input)
    case input
    when /^(?<command>place) (?<x>\d) (?<y>\d) (?<direction>[news])$/
      { type: $~[:command], event: { x: $~[:x].to_i, y: $~[:y].to_i, direction: $~[:direction] } }
    when "move", "left", "right"
      { type: input, event: {} }
    else
      raise InvalidCommand, input
    end
  end

end
