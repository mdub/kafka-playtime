#! /usr/bin/env ruby

require "clamp"
require "json"
require "ruby-kafka"

class InvalidCommand < StandardError
end

Clamp do
  option ["-k", "--kafka-broker"], "ADDRESS", "Kafka broker address",
         multivalued: true,
         environment_variable: "KAFKA_BROKER",
         required: true


  subcommand "control", "control a robot" do

    parameter "ID", "robot ID"

    def execute
      print '> '
      $stdin.each do |line|
        begin
          event = { robot: id }.merge(parse_command(line.chomp))
          kafka.deliver_message(JSON.dump(event), topic: kafka_commands_topic)
          puts "OK"
        rescue InvalidCommand => e
          puts "WAT?"
        end
        print '> '
      end
    end

  end

  subcommand "update-states", "update states based on events" do

    option "--replay", :flag, "replay all robot events"

    def execute

      consumer = kafka.consumer(group_id: "update-robot-states")
      consumer.subscribe(kafka_commands_topic, start_from_beginning: replay?)
      trap("TERM") do 
        puts "Shutting down"
        consumer.stop
      end
      consumer.each_message do |message|
        event = JSON.load(message.value)
        p event
        # puts message.topic, message.partition
        # puts message.offset, message.key, message.value
      end

    end
    
  end

  subcommand "watch", "observe state of the world" do
    def execute
      puts "eventually I'll print the board"
    end
  end

  private

  def kafka
    @kafka ||= Kafka.new(seed_brokers: kafka_broker_list)
  end

  def kafka_commands_topic
    "robot-commands"
  end

  def kafka_states_topic
    "robot-states"
  end

  def parse_command(input)
    case input
    when /^(?<command>place) (?<x>\d) (?<y>\d) (?<direction>[news])$/
      { type: $~[:command], event: { x: $~[:x].to_i, y: $~[:y].to_i, direction: $~[:direction] } }
    when "move"
      { type: input, event: {} }
    when "left", "right"
      { type: "rotate", event: { direction: input } }
    else
      raise InvalidCommand, input
    end
  end

end
